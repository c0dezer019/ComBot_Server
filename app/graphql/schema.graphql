scalar DateTime
scalar Dict
scalar Discriminator
scalar Set
scalar Snowflake

union MemberNewMember = Member | NewMember

type DeleteResult {
    code: Int!
    successMsg: String
    error: String
}

type Guild implements Server {
    guildId: Snowflake!
    name: String
    status: String
    settings: Dict
    dateAdded: DateTime
    lastActivity: String
    lastActiveChannel: Snowflake
    lastActiveTs: DateTime
    idleTimes: [Int!]
    averageIdleTime: Int
    recentAverages: [Int!]
    members: Set
}

input GuildCreate {
    guildId: Snowflake!
    name: String!
}

type GuildMutations {
    createGuild(Input: GuildCreate!): GuildResult!
    updateGuild(guildId: Snowflake!, guildName: String!, Input: GuildUpdate!): GuildResult!
    deleteGuild(guildId: Snowflake!): DeleteResult!
}

type GuildResult {
    code: Int!
    error: String
    guild: Guild
}

input GuildUpdate {
    name: String
    lastActivity: String
    lastActiveChannel: Snowflake
    lastActiveTs: DateTime
    idleTimes: [Int!]
    averageIdleTime: Int
    recentAverages: [Int!]
    status: String
    settings: Dict
    members: Set
}

type Member implements User {
    memberId: Snowflake!
    username: String
    discriminator: Int
    adminAccess: Boolean
    dateAdded: DateTime
    flags: [String!]
    nickname: String
    lastActivity: String
    lastActiveServer: Snowflake
    lastActiveChannel: Snowflake
    lastActiveTs: DateTime
    idleTimes: [Int!]
    averageIdleTime: Int
    recentAverages: [Int!]
    status: String
}

input MemberCreate {
    memberId: Snowflake!
    username: String!
    discriminator: Int!
    nickname: String
    flags: [String!]
}

type MemberMutations {
    createMember(Input: MemberCreate!, guildId: Snowflake!, guildName: String!, nickname: String = null): MemberResult!
    updateMember(Input: MemberUpdate!): MemberResult!
    deleteMember(guildId: Snowflake!, memberId: Snowflake!): DeleteResult!
}

type MemberResult {
    code: Int!
    error: String
    member: MemberNewMember
}

input MemberUpdate {
    memberId: Snowflake!
    nickname: String
    username: String
    discriminator: Int
    adminAccess: Boolean
    lastActivity: String
    lastActiveServer: Snowflake
    lastActiveChannel: Snowflake
    lastActiveTs: DateTime
    idleTimes: [Int!]
    averageIdleTime: Int
    recentAverages: [Int!]
    flags: [String!]
    status: String
}

type MembersResult {
    code: Int!
    error: String
    members: Set
}

type Mutation {
    guild: GuildMutations!
    member: MemberMutations!
}

type NewMember implements User {
    memberId: Snowflake!
    username: String!
    discriminator: Int!
    adminAccess: Boolean
    dateAdded: DateTime
    flags: [String!]
    nickname: String
}

type Query {
    member(guildId: Snowflake!, guildName: String!, memberId: Snowflake!, username: String!, discriminator: Discriminator!, nickname: String = ""): MemberResult!
    members: MembersResult!
}

interface Server {
    guildId: Snowflake!
    name: String
    status: String
    settings: Dict
    dateAdded: DateTime
}


interface User {
    memberId: Snowflake!
    username: String
    discriminator: Int
    adminAccess: Boolean
    dateAdded: DateTime
    flags: [String!]
}
