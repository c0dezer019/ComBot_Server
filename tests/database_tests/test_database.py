
# Generated by CodiumAI

import pytest


class TestResolver:

    #  create_guild method creates a new Guild object and adds it to the database
    @pytest.fixture
    def resolver():
        return Resolver()

    def test_create_guild_success(self, resolver):
        guild_id = 123
        name = "Test Guild"

        guild = resolver.create_guild(guild_id, name)

        assert isinstance(guild, Guild)
        assert guild.guild_id == guild_id
        assert guild.name == name
        assert guild in resolver.db

    #  create_member method creates a new MemberShard object and adds it to the database
    @pytest.fixture
    def resolver():
        return Resolver()

    def test_create_member_success(self, resolver):
        guild_id = 123
        guild_name = "Test Guild"
        member_id = 456
        username = "Test User"
        discriminator = 1234

        guild = Guild(guild_id=guild_id, name=guild_name)
        resolver.db.add(guild)
        resolver.db.commit()

        member = resolver.create_member(guild_id, guild_name, member_id, username, discriminator)

        assert isinstance(member, MemberShard)
        assert member.member_id == member_id
        assert member.username == username
        assert member.discriminator == discriminator
        assert member in guild.members

    #  retrieve_guild method retrieves a Guild object from the database based on guild_id and name
    @pytest.fixture
    def resolver():
        return Resolver()

    def test_retrieve_guild_success(self, resolver):
        guild_id = 123
        name = "Test Guild"

        guild = Guild(guild_id=guild_id, name=name)
        resolver.db.add(guild)
        resolver.db.commit()

        retrieved_guild = resolver.retrieve_guild(guild_id, name)

        assert isinstance(retrieved_guild, Guild)
        assert retrieved_guild.guild_id == guild_id
        assert retrieved_guild.name == name

    #  create_guild method raises IntegrityError if guild_id already exists in the database
    @pytest.fixture
    def resolver():
        return Resolver()

    def test_create_guild_integrity_error(self, resolver):
        guild_id = 123
        name = "Test Guild"

        guild = Guild(guild_id=guild_id, name=name)
        resolver.db.add(guild)
        resolver.db.commit()

        with pytest.raises(IntegrityError):
            resolver.create_guild(guild_id, name)

    #  create_guild method raises TypeError if guild_id or name are not provided
    @pytest.fixture
    def resolver():
        return Resolver()

    def test_create_guild_type_error(self, resolver):
        with pytest.raises(TypeError):
            resolver.create_guild(None, "Test Guild")

        with pytest.raises(TypeError):
            resolver.create_guild(123, None)

    #  create_member method raises InvalidRequestError if guild_id or guild_name are not found in the database
    @pytest.fixture
    def resolver():
        return Resolver()

    def test_create_member_invalid_request_error(self, resolver):
        guild_id = 123
        guild_name = "Test Guild"
        member_id = 456
        username = "Test User"
        discriminator = 1234

        with pytest.raises(InvalidRequestError):
            resolver.create_member(guild_id, guild_name, member_id, username, discriminator)
